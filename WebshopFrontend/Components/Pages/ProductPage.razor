@page "/products/{id:int}"
@rendermode InteractiveServer
@using System.Data.SqlTypes
@using WebshopCore
@using System.Text.Json
@using WebshopCore.Dtos
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Product Page</PageTitle>

@if (Product != null)
{
    <article>
        <div class="product-page-row">
            <div class="product-page-image">
                <div class="product-soldout-image-overlay @(Product.AvailableQty == 0 ? "" : "hidden")"><p>SOLD<br />OUT</p></div>
                @* product image *@
                <img src="@Product.ImageUrl" alt="Image for @Product.ProductName">
            </div>
            <div class="product-page-info">
                <div class="product-page-content-container">
                    @* product info *@
                    <h2>@Product.ProductName</h2>
                    <p><span class="barlow-semibold">Title: </span>@Product.Title</p>
                    <p><span class="barlow-semibold">Author: </span>@Product.Authors</p>
                    <p><span class="barlow-semibold @(InSeries() ? string.Empty : "hidden")">Series: </span>@Product.Series</p>
                    <p><span class="barlow-semibold @(InSeries() ? string.Empty : "hidden")">Book number in series: </span>@Product.NumberInSeries</p>
                    <p><span class="barlow-semibold">Description: </span>@Product.Description</p>
                    <p><span class="barlow-semibold">ISBN: </span>@Product.ISBN</p>
                    <p><span class="barlow-semibold">Publisher: </span>@Product.Publisher</p>
                    <p><span class="barlow-semibold">Published: </span>@Product.PublishedYear</p>
                </div>
                <div class="product-page-content-container">
                    <div class="product-preview-row">
                        <div class="product-preview-row barlow-semibold product-page-price">
                            @Product.Price @Currency
                        </div>
                        <div class="product-preview-row">
                            <span>In stock: @Product.AvailableQty</span>
                            <AddToCart OnAddToCart="FetchDataById" Product="@Product" ButtonDisabled="@(Product.AvailableQty == 0)" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </article>
}
else
{
    <p><em>Product not found...</em></p>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string Currency { get; set; } = "SEK";

    public required BookDto? Product { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await FetchDataById();
        StateHasChanged();
    }

    private async Task FetchDataById()
    {
        using var client = HttpClientFactory.CreateClient("WebshopBackendAPI");
        var data = await client.GetStringAsync($"/products/{Id}");
        Product = JsonSerializer.Deserialize<BookDto>(data, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private bool InSeries()
    {
        return !string.IsNullOrEmpty(Product?.Series);
    }
}
