@page "/orderconfirmation"
@using WebshopCore
@using WebshopCore.Dtos
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@rendermode InteractiveServer

<PageTitle>Order Confirmation</PageTitle>

<h2>Order confirmation</h2>

<div class="cart-main-row">
    @if (IsOrderEmpty())
    {
        <p>There is no order to display..</p>
    }
    else
    {
        <div class="order-address">
            @* delivery address etc. *@
            <p class="barlow-semibold">Delivery Details</p>
            <p><span class="barlow-semibold">Name:</span> @_order?.ShippingDetails.FirstName @_order?.ShippingDetails.LastName</p>
            <p><span class="barlow-semibold">Email:</span> @_order?.ShippingDetails.Email</p>
            <p class="barlow-semibold">Address:</p>
            <p>
                @_order?.ShippingDetails.Address1<br />
                <span class="@(string.IsNullOrEmpty(_order?.ShippingDetails.Address2) ? "hidden" : "")">@_order?.ShippingDetails.Address2<br /></span>
                @_order?.ShippingDetails.City<br />
                @_order?.ShippingDetails.Zip<br />
                @_order?.ShippingDetails.Country
            </p>
        </div>
        <div class="cart-content-row">
            <div class="cart-content">
                @* order contents *@
                <p class="barlow-semibold">Items Ordered</p>
                <table>
                    <tr>
                        <th class="th-left">Item</th>
                        <th class="th-center">Price</th>
                        <th class="th-right">Qty</th>
                    </tr>
                    @foreach (var product in _order!.OrderItems)
                    {
                        <tr>
                            <td>@product.Book.ProductName</td>
                            <td class="text-right">@(product.PriceAtPurchase * product.Quantity) @Currency</td>
                            <td class="text-right">(@product.Quantity)</td>
                        </tr>
                    }
                    <tr class="barlow-regular-italic text-right">
                        <td>Shipping</td>
                        <td>@_order.ShippingPrice @Currency</td>
                        <td></td>
                    </tr>
                    <tr class="barlow-semibold-italic text-right">
                        <td>Total</td>
                        <td>@_order.TotalPrice @Currency</td>
                        <td></td>
                    </tr>
                </table>
            </div>
        </div>
    }
</div>

@code {
    private OrderDto? _order;
    public string Currency { get; set; } = "SEK";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _order = await GetOrderAsync();
        StateHasChanged();
    }

    // will be updated to get order from backend
    private async Task<OrderDto?> GetOrderAsync() => await LocalStorage.GetItemAsync<OrderDto>("order");

    private bool IsOrderEmpty() => _order == null;

    // this will need to be run after the order has been written to the database
    private async Task ClearOrder()
    {
        _order = new OrderDto();
        await LocalStorage.RemoveItemAsync("order");
    }

}
