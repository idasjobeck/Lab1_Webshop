@page "/cart"
@rendermode InteractiveServer
@using WebshopCore
@using WebshopCore.Dtos
@using OrderDto = WebshopCore.OrderDto
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<PageTitle>Cart</PageTitle>

<div class="cart-main-row">
    <div class="cart-address">
        @* form for address etc. *@
        <p class="barlow-semi-condensed-light-italic">Fields noted with <i>*</i> are mandatory fields.</p>
        <EditForm id="address-form" Model="@_shippingDetails" OnValidSubmit="CheckOut">
            <DataAnnotationsValidator />
            <label for="firstname" class="barlow-semibold">First name</label><i> *</i><br />
            <InputText id="firstname" @bind-Value="_shippingDetails.FirstName" placeholder="FirstName" />
            <span class="barlow-semi-condensed-light-italic"><ValidationMessage For="@(() => _shippingDetails.FirstName)" /></span>
            <label for="lastname" class="barlow-semibold">Last name</label><i> *</i><br />
            <InputText id="lastname" @bind-Value="_shippingDetails.LastName" placeholder="LastName" />
            <span class="barlow-semi-condensed-light-italic"><ValidationMessage For="@(() => _shippingDetails.LastName)" /></span>
            <label for="email" class="barlow-semibold">Email</label><i> *</i><br />
            <InputText id="email" @bind-Value="_shippingDetails.Email" placeholder="name@email.com" />
            <span class="barlow-semi-condensed-light-italic"><ValidationMessage For="@(() => _shippingDetails.Email)" /></span>
            <label for="address1" class="barlow-semibold">Address row 1</label><i> *</i><br />
            <InputText id="address1" @bind-Value="_shippingDetails.Address1" placeholder="Address row 1" />
            <span class="barlow-semi-condensed-light-italic"><ValidationMessage For="@(() => _shippingDetails.Address1)" /></span>
            <label for="address2" class="barlow-semibold">Address row 2 (optional)</label><br />
            <InputText id="address2" @bind-Value="_shippingDetails.Address2" placeholder="Address row 2 (optional)" />
            <label for="city" class="barlow-semibold">City</label><i> *</i><br />
            <InputText id="city" @bind-Value="_shippingDetails.City" placeholder="City" />
            <span class="barlow-semi-condensed-light-italic"><ValidationMessage For="@(() => _shippingDetails.City)" /></span>
            <label for="zip" class="barlow-semibold">Zip</label><i> *</i><br />
            <InputText id="zip" @bind-Value="_shippingDetails.Zip" placeholder="Zip code" />
            <span class="barlow-semi-condensed-light-italic"><ValidationMessage For="@(() => _shippingDetails.Zip)" /></span>
            <label for="country" class="barlow-semibold">Country</label><i> *</i><br />
            <InputText id="country" @bind-Value="_shippingDetails.Country" placeholder="Country" />
            <span class="barlow-semi-condensed-light-italic"><ValidationMessage For="@(() => _shippingDetails.Country)" /></span>
            <button type="reset" @onclick="Reset">Reset</button>
        </EditForm>
    </div>
    <div class="cart-content-row">
        <div class="cart-content">
            @* cart contents *@
            <p class="barlow-semibold">Items in cart:</p>
            @if (IsCartEmpty())
            {
                <p>Cart is empty..</p>
            }
            else
            {
                <table>
                    @foreach (var product in _cart)
                    {
                        <tr>
                            <td>@product.ProductName</td>
                            <td class="text-right">@product.Price @Currency</td>
                            <td><RemoveFromCart Product="product"/></td>
                        </tr>
                    }
                    <tr class="barlow-regular-italic text-right">
                        <td>Shipping *</td>
                        <td>@(_totalPrice > _freeShippingOver ? 0 : _shippingCost) @Currency</td>
                        <td></td>
                    </tr>
                    <tr class="barlow-semibold-italic text-right">
                        <td>Total</td>
                        <td>@_totalPrice @Currency</td>
                        <td></td>
                    </tr>
                </table>
                <p class="barlow-semi-condensed-light-italic">* Free shipping on orders over @_freeShippingOver @Currency</p>
            }
        </div>
        <div class="cart-content-buttons">
            <button @onclick="ClearCart" disabled="@(IsCartEmpty())">Empty cart</button>
            <button type="submit" form="address-form" disabled="@(IsCartEmpty())">Checkout</button>
        </div>
    </div>
</div>


@code {
    private List<BookDto> _cart = new();

    [Parameter]
    public string Currency { get; set; } = "SEK";

    private decimal _totalPrice;
    private readonly decimal _shippingCost = 59;
    private readonly decimal _freeShippingOver = 500;

    private ShippingDetailsDto _shippingDetails = new ShippingDetailsDto {FirstName = "", LastName = "", Email = "", Address1 = "", City = "", Zip = "", Country = ""};

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _cart = await GetItemsFromCartAsync();
        CalculateTotalPrice();
        StateHasChanged();
    }

    private async Task<List<BookDto>> GetItemsFromCartAsync()
    {
        return await LocalStorage.GetItemAsync<List<BookDto>>("cart") ?? new List<BookDto>();
    }

    private bool IsCartEmpty()
    {
        return _cart.Count == 0;
    }

    private void CalculateTotalPrice()
    {
        _totalPrice = 0;

        foreach (var item in _cart)
            _totalPrice += item.Price;

        if (_totalPrice <= _freeShippingOver)
            _totalPrice += _shippingCost;
    }

    private void Reset()
    {
        _shippingDetails = new ShippingDetailsDto { FirstName = "", LastName = "", Email = "", Address1 = "", City = "", Zip = "", Country = "" };
    }

    private async Task ClearCart()
    {
        _cart.Clear();
        await LocalStorage.RemoveItemAsync("cart");
        StateHasChanged();
    }

    private async Task CheckOut()
    {
        // generate order and store it in local storage - will be updated to store in database
        await LocalStorage.SetItemAsync("order", GenerateOrder());
        // clear cart
        await ClearCart();
        // navigate to order confirmation page
        NavigationManager.NavigateTo("/orderconfirmation");
    }

    private WebshopCore.Dtos.OrderDto GenerateOrder()
    {
        var order = new WebshopCore.Dtos.OrderDto
            {
                OrderNumber = new Guid(),
                ShippingDetails = _shippingDetails,
                OrderDate = DateTime.Now,
                ShippingDate = null,
                OrderStatus = "Ordered",
                ShippingPrice = _totalPrice > _freeShippingOver ? 0 : _shippingCost,
                TotalPrice = _totalPrice,
                OrderItems = new List<WebshopCore.Dtos.OrderItemDto>() // the list being empty is temporary until the OrderItemDto is updated and saving orders into the database is implemented
            };

        return order;
    }
}
