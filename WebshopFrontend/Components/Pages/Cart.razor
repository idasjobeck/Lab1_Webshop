@page "/cart"
@rendermode InteractiveServer
@using System.Text.Json
@using WebshopCore
@using WebshopCore.Dtos
@using Microsoft.AspNetCore.Components.Authorization
@inject WebshopAuthenticationStateProvider AuthStateProvider
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<PageTitle>Cart</PageTitle>

<div class="cart-main-row">
    <div class="cart-address">
        <AuthorizeView>
            <Authorized>
                @* form for address etc. *@
                 <p class="barlow-semi-condensed-light-italic">Fields noted with <i>*</i> are mandatory fields.</p>
                <EditForm Context="formContext" id="address-form" Model="@_shippingDetails" OnValidSubmit="CheckOut">
                    <DataAnnotationsValidator/>
                    <label for="firstname" class="barlow-semibold">First name</label><i> *</i><br/>
                    <InputText id="firstname" @bind-Value="_shippingDetails.FirstName" placeholder="FirstName"/>
                    <span class="barlow-semi-condensed-light-italic"><ValidationMessage For="@(() => _shippingDetails.FirstName)"/></span>
                    <label for="lastname" class="barlow-semibold">Last name</label><i> *</i><br/>
                    <InputText id="lastname" @bind-Value="_shippingDetails.LastName" placeholder="LastName"/>
                    <span class="barlow-semi-condensed-light-italic"><ValidationMessage For="@(() => _shippingDetails.LastName)"/></span>
                    <label for="address1" class="barlow-semibold">Address row 1</label><i> *</i><br/>
                    <InputText id="address1" @bind-Value="_shippingDetails.Address1" placeholder="Address row 1"/>
                    <span class="barlow-semi-condensed-light-italic"><ValidationMessage For="@(() => _shippingDetails.Address1)"/></span>
                    <label for="address2" class="barlow-semibold">Address row 2 (optional)</label><br/>
                    <InputText id="address2" @bind-Value="_shippingDetails.Address2" placeholder="Address row 2 (optional)"/>
                    <label for="city" class="barlow-semibold">City</label><i> *</i><br/>
                    <InputText id="city" @bind-Value="_shippingDetails.City" placeholder="City"/>
                    <span class="barlow-semi-condensed-light-italic"><ValidationMessage For="@(() => _shippingDetails.City)"/></span>
                    <label for="zip" class="barlow-semibold">Zip</label><i> *</i><br/>
                    <InputText id="zip" @bind-Value="_shippingDetails.Zip" placeholder="Zip code"/>
                    <span class="barlow-semi-condensed-light-italic"><ValidationMessage For="@(() => _shippingDetails.Zip)"/></span>
                    <label for="country" class="barlow-semibold">Country</label><i> *</i><br/>
                    <InputText id="country" @bind-Value="_shippingDetails.Country" placeholder="Country"/>
                    <span class="barlow-semi-condensed-light-italic"><ValidationMessage For="@(() => _shippingDetails.Country)"/></span>
                    <button type="reset" @onclick="Reset">Reset</button>
                </EditForm>
            </Authorized>
            <NotAuthorized>
                <p>Please log in to be able to checkout.</p>
                <Login />
            </NotAuthorized>
        </AuthorizeView>
        
    </div>
    <div class="cart-content-row">
        <div class="cart-content">
            @* cart contents *@
            <p class="barlow-semibold">Items in cart:</p>
            @if (IsCartEmpty())
            {
                <p>Cart is empty..</p>
            }
            else
            {
                <table>
                    <tr class="barlow-semibold-italic">
                        <th class="th-left">Item</th>
                        <th></th>
                        <th class="th-center">Price</th>
                        <th class="th-right">Qty</th>
                        <th></th>
                    </tr>
                    @foreach (var item in _cart)
                    {
                        <tr>
                            <td>@item.Book.ProductName</td>
                            <td class="barlow-semi-condensed-light-italic text-right cart-original-price">@(GetOriginalPrice(item.Book) * item.Quantity)</td>
                            <td class="text-right @(GetPriceCssClass(item.Book))">@((item.Book.SalePrice ?? item.Book.Price) * item.Quantity) @Currency</td>
                            <td class="text-right">(@item.Quantity)</td>
                            <td class="text-right"><RemoveFromCart Product="item.Book"/></td>
                        </tr>
                    }
                    <tr class="barlow-regular-italic text-right">
                        <td></td>
                        <td>Shipping *</td>
                        <td>@(_totalPriceExclShipping > _freeShippingOver ? 0 : _shippingCost) @Currency</td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr class="barlow-semibold-italic text-right">
                        <td></td>
                        <td>Total</td>
                        <td>@_totalPrice @Currency</td>
                        <td></td>
                        <td></td>
                    </tr>
                </table>
                <p class="barlow-semi-condensed-light-italic">* Free shipping on orders over @_freeShippingOver @Currency</p>
            }
        </div>
        <div class="cart-content-buttons">
            <button @onclick="@(() => ClearCart(false))" disabled="@(IsCartEmpty())">Empty cart</button>
            <AuthorizeView>
                <Authorized>
                    <button type="submit" form="address-form" disabled="@(IsCartEmpty())">Checkout</button>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
</div>

@code {
    private List<OrderItemDto> _cart = new();

    [Parameter]
    public string Currency { get; set; } = "SEK";

    private decimal _totalPriceExclShipping;
    private decimal _totalPrice;
    private readonly decimal _shippingCost = 59;
    private readonly decimal _freeShippingOver = 500;

    private ShippingDetailsDto _shippingDetails = new ShippingDetailsDto {FirstName = "", LastName = "", Address1 = "", City = "", Zip = "", Country = ""};

    private AuthenticationState? _authState;
    private WebshopUserDto? _loggedInUser;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _cart = await GetItemsFromCartAsync();
        CalculateTotalPrice();
        StateHasChanged();
    }

    private async Task<List<OrderItemDto>> GetItemsFromCartAsync() => await LocalStorage.GetItemAsync<List<OrderItemDto>>("cart") ?? new List<OrderItemDto>();

    private bool IsCartEmpty() => _cart.Count == 0;

    private string GetPriceCssClass(BookDto product) => product.SalePrice != null ? "cart-onsale-price" : "";

    private decimal? GetOriginalPrice(BookDto product) => product.SalePrice != null ? product.Price : null;

    private void CalculateTotalPrice()
    {
        _totalPriceExclShipping = 0;
        _totalPrice = 0;

        foreach (var item in _cart)
            _totalPriceExclShipping += (item.Book.SalePrice ?? item.Book.Price) * item.Quantity;

        _totalPrice = _totalPriceExclShipping;

        if (_totalPriceExclShipping <= _freeShippingOver)
            _totalPrice += _shippingCost;
    }

    private void Reset()
    {
        _shippingDetails = new ShippingDetailsDto { FirstName = "", LastName = "", Address1 = "", City = "", Zip = "", Country = "" };
    }

    private async Task ClearCart(bool isCheckout)
    {
        if (!isCheckout)
        {
            using var client = HttpClientFactory.CreateClient("WebshopBackendAPI");
            foreach (var item in _cart)
            {
                var response = await client.PatchAsync($"/increaseAvailableQty/{item.Book.Id}/{item.Quantity}", null);
            }
        }

        _cart.Clear();
        await LocalStorage.RemoveItemAsync("cart");
        StateHasChanged();
    }

    private async Task CheckOut()
    {
        await GetUser();

        var order = GenerateOrder();
        await LocalStorage.SetItemAsync("order", order);

        using var client = HttpClientFactory.CreateClient("WebshopBackendAPI");
        var response = await client.PostAsJsonAsync("/checkout", order);

        await ClearCart(true);
        
        NavigationManager.NavigateTo($"/orderconfirmation/{order.OrderNumber.ToString()}"); //could this take the order number as a parameter? 
        //and order confirmation page could then get the order from the backend
    }

    private OrderDto GenerateOrder()
    {
        _shippingDetails.User = _loggedInUser;

        return new OrderDto
        {
            OrderNumber = Guid.NewGuid(), //new Guid(),
            User = _loggedInUser,
            ShippingDetails = _shippingDetails,
            OrderDate = DateTime.Now,
            ShippingDate = null,
            OrderStatus = "Ordered",
            ShippingPrice = _totalPriceExclShipping > _freeShippingOver ? 0 : _shippingCost,
            TotalPrice = _totalPrice,
            OrderItems = _cart
        };
    }

    private async Task GetUser() //this will get the WebshopUserDto object of the user logged in
    {
        var client = HttpClientFactory.CreateClient("WebshopBackendAPI");

        var response = await client.GetAsync("account/AuthenticatedUser");

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var user = JsonSerializer.Deserialize<WebshopUserDto>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            _loggedInUser = user;
        }
    }
}
