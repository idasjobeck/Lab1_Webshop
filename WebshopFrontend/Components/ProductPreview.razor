@using System.Text.Json
@using WebshopCore
@using WebshopCore.Dtos
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory

<div class="product-preview">
    <div class="product-preview-content-container">

        <div class="product-preview-image">
            <div class="product-soldout-image-overlay @(Product.AvailableQty == 0 ? "" : "hidden")"><p>SOLD<br />OUT</p></div>
            <img src="@(string.IsNullOrEmpty(Product.ImageUrl) ? "/resources/no-image-available.jpg" : Product.ImageUrl)" alt="Image for @Product.ProductName">
        </div>
        <div class="product-preview-row barlow-semibold">
            <a href="/products/@Product.Id">@Product.ProductName</a>
        </div>
    </div>
    <div class="product-preview-content-container">
        <div class="product-preview-row barlow-semibold product-preview-price">
            <p class="product-original-price @(ShowOriginalPrice())">@Product.Price @Currency</p>
            <p class="@GetPriceCssClass()">@(Product.SalePrice ?? Product.Price) @Currency</p>
        </div>
        <div class="product-preview-row">
            <span>In stock: @Product.AvailableQty</span>
            <AddToCart OnAddToCart="FetchDataById" Product="@Product" ButtonDisabled="@(Product.AvailableQty == 0)"/>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public required BookDto Product { get; set; }

    [Parameter]
    public string Currency { get; set; } = "SEK";

    private async Task FetchDataById()
    {
        using var client = HttpClientFactory.CreateClient("WebshopBackendAPI");
        var data = await client.GetStringAsync($"/products/{Product.Id}");
        Product = JsonSerializer.Deserialize<BookDto>(data, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private string GetPriceCssClass() => Product.SalePrice != null ? "product-onsale-price" : "";

    private string ShowOriginalPrice() => Product.SalePrice != null ? "" : "hidden";
}
