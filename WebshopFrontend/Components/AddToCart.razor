@using WebshopCore
@using WebshopCore.Dtos
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<button @onclick="() => AddToCartAsync(Product)" disabled="@ButtonDisabled">Add to cart</button>

@code {
    private List<BookDto> _cart = new();

    [Parameter]
    public required BookDto Product { get; set; }

    [Parameter]
    public EventCallback OnAddToCart { get; set; }

    [Parameter]
    public bool ButtonDisabled { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _cart = await GetItemsFromCartAsync();
        StateHasChanged();
    }

    private async Task<List<BookDto>> GetItemsFromCartAsync()
    {
        return await LocalStorage.GetItemAsync<List<BookDto>>("cart") ?? new List<BookDto>();
    }

    private async Task AddToCartAsync(BookDto book)
    {
        _cart = await GetItemsFromCartAsync();
        _cart.Add(book);
        await LocalStorage.SetItemAsync("cart", _cart);

        using var client = HttpClientFactory.CreateClient("WebshopBackendAPI");
        var response = await client.PatchAsync($"/decreaseAvailableQty/{Product.Id}", null);
        await OnAddToCart.InvokeAsync();
    }
}
