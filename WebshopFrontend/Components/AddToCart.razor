@using WebshopCore
@using WebshopCore.Dtos
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<button @onclick="() => AddToCartAsync(Product)" disabled="@ButtonDisabled">Add to cart</button>

@code {
    private List<OrderItemDto> _cart = new();

    [Parameter]
    public required BookDto Product { get; set; }

    [Parameter]
    public EventCallback OnAddToCart { get; set; }

    [Parameter]
    public bool ButtonDisabled { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _cart = await GetItemsFromCartAsync();
        StateHasChanged();
    }

    private async Task<List<OrderItemDto>> GetItemsFromCartAsync()
    {
        return await LocalStorage.GetItemAsync<List<OrderItemDto>>("cart") ?? new List<OrderItemDto>();
    }

    private async Task AddToCartAsync(BookDto book)
    {
        _cart = await GetItemsFromCartAsync();
        var orderItem = new OrderItemDto();

        // Check if the product is already in the cart
        var existingItem = _cart.FirstOrDefault(p => p.Book.Id == book.Id);
        if (existingItem != null)
        {
            existingItem.Quantity++;
        }
        else
        {
            orderItem.Book = book;
            orderItem.Quantity = 1;
            orderItem.PriceAtPurchase = book.SalePrice ?? book.Price;
            _cart.Add(orderItem);
        }

        //_cart.Add(book);
        await LocalStorage.SetItemAsync("cart", _cart);

        using var client = HttpClientFactory.CreateClient("WebshopBackendAPI");
        var response = await client.PatchAsync($"/decreaseAvailableQty/{Product.Id}/{1}", null);
        await OnAddToCart.InvokeAsync();
    }
}
