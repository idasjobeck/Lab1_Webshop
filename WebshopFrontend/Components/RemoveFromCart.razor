@using System.Diagnostics
@using WebshopCore
@using WebshopCore.Dtos
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<i class="bi bi-trash3 remove-icon" @onclick="() => RemoveFromCartAsync(Product)"></i>

@code {
    private List<OrderItemDto> _cart = new();

    [Parameter]
    public required BookDto Product { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _cart = await GetItemsFromCartAsync();
        StateHasChanged();
    }

    private async Task<List<OrderItemDto>> GetItemsFromCartAsync()
    {
        return await LocalStorage.GetItemAsync<List<OrderItemDto>>("cart") ?? new List<OrderItemDto>();
    }

    private async Task RemoveFromCartAsync(BookDto product)
    {
        _cart = await GetItemsFromCartAsync();

        var productToRemove = _cart.FirstOrDefault(p => p.Book.Id == product.Id);
        if (productToRemove != null)
        {
            if (productToRemove.Quantity > 1)
            {
                productToRemove.Quantity--;
            }
            else
            {
                _cart.Remove(productToRemove);
            }
        }

        await LocalStorage.SetItemAsync("cart", _cart);

        using var client = HttpClientFactory.CreateClient("WebshopBackendAPI");
        var response = await client.PatchAsync($"/increaseAvailableQty/{Product.Id}/{1}", null);
    }
}
