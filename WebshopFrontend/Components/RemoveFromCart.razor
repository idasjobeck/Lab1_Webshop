@using System.Diagnostics
@using System.Text.Json
@using WebshopCore
@using WebshopCore.Dtos
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage

<i class="bi bi-trash3 remove-icon" @onclick="() => RemoveFromCartAsync(Product)"></i>

@code {
    private List<OrderItemDto> _cart = new();

    [Parameter]
    public required BookDto Product { get; set; }

    [Parameter]
    public EventCallback OnRemoveFromCart { get; set; }

    private WebshopUserDto? _loggedInUser;

    private bool _userHasCart = false;

    private async Task<List<OrderItemDto>> GetItemsFromCartAsync()
    {
        await GetUser();

        //if user is logged in, check for cart in database
        if (_loggedInUser != null)
        {
            using var client = HttpClientFactory.CreateClient("WebshopBackendAPI");
            var json = await client.GetStringAsync($"/cart/{_loggedInUser.Id}");

            if (json == "null")
                return await SessionStorage.GetItemAsync<List<OrderItemDto>>("cart") ?? new List<OrderItemDto>();

            var cartDto = JsonSerializer.Deserialize<CartDto>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            _userHasCart = true;
            return JsonSerializer.Deserialize<List<OrderItemDto>>(cartDto!.JsonCart, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<OrderItemDto>();
        }

        //else check for cart in session storage
        return await SessionStorage.GetItemAsync<List<OrderItemDto>>("cart") ?? new List<OrderItemDto>();
    }

    private async Task RemoveFromCartAsync(BookDto product)
    {
        _cart = await GetItemsFromCartAsync();

        var productToRemove = _cart.FirstOrDefault(p => p.Book.Id == product.Id);
        if (productToRemove != null)
        {
            if (productToRemove.Quantity > 1)
            {
                productToRemove.Quantity--;
            }
            else
            {
                _cart.Remove(productToRemove);
            }
        }

        await SessionStorage.SetItemAsync("cart", _cart);

        using var client = HttpClientFactory.CreateClient("WebshopBackendAPI");
        // If the user is logged in, update the cart in the database
        if (_loggedInUser != null)
        {
            var cartDto = new CartDto
            {
                UserId = _loggedInUser.Id,
                JsonCart = JsonSerializer.Serialize(_cart)
            };

            if (_userHasCart)
                await client.PatchAsJsonAsync($"/cart/{_loggedInUser.Id}", cartDto);
            else
                await client.PostAsJsonAsync("/cart", cartDto);
        }

        await client.PatchAsync($"/increaseAvailableQty/{Product.Id}/{1}", null);
        await OnRemoveFromCart.InvokeAsync();
    }

    private async Task GetUser() //this will get the WebshopUserDto object of the user logged in
    {
        var client = HttpClientFactory.CreateClient("WebshopBackendAPI");

        var response = await client.GetAsync("account/AuthenticatedUser");

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var user = JsonSerializer.Deserialize<WebshopUserDto>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            _loggedInUser = user;
        }
    }
}
